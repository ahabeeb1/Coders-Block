Project Requirements Document: CodersBlock Application

Overview

The CodersBlock application is a platform designed to help users improve their programming skills through interactive challenges and real-world coding examples. The system will present users with curated coding challenges based on their skill level, allow them to write and test code in a browser-based editor, and provide real-time feedback on their submissions. Additional features include user authentication, progress tracking, an integrated AI agent, and retrieval-augmented generation (RAG) capabilities to enhance learning with contextual code snippets and documentation.

Key Features

1. User Authentication

Login and Signup:

Users can sign up using a username, email, and password.

Support login via either email or username.

Passwords are hashed using BCrypt.

API Endpoints:

POST /auth/signup

POST /auth/login

2. Home Page

Provide an overview of the platform's purpose.

Highlight the main features and benefits.

Include login and signup links.

3. User Dashboard

Display personalized information after login:

Current level.

Recommended challenges.

Progress metrics (e.g., challenges completed).

API Endpoints:

GET /api/user/dashboard

GET /api/challenges/recommended

4. Challenge System

Challenge Listing:

Display a list of challenges with filters for difficulty, tags, categories, and programming languages (e.g., Java, Python).

Challenge Details:

Provide a detailed view of the challenge, including a description, sample input/output, and an embedded code editor.

Submission Validation:

Users can submit their solutions.

Backend will validate submissions using predefined test cases and provide feedback.

API Endpoints:

GET /api/challenges

GET /api/challenges/{id}

POST /api/challenges/{id}/submit

5. Interactive Code Editor

Integrate a browser-based code editor (e.g., Monaco Editor or CodeMirror).

Features:

Syntax highlighting.

Auto-completion.

Error checking.

6. Integrated AI Agent

Purpose: Serve as a pair programmer to assist users.

Answer questions related to challenges.

Provide guidance and hints for solving problems.

Offer contextual suggestions for code improvements.

Implementation:

Use Retrieval-Augmented Generation (RAG) to fetch relevant code snippets and documentation.

Integrate with vector database (e.g., Pinecone) for storing and retrieving contextual embeddings.

API Endpoints:

POST /api/ai/assist: Accept user queries and return AI-driven suggestions.

7. Progress Tracking

Track user progress:

Challenges completed.

Time spent on challenges.

Streak tracking.

Database Schema:

UserProgress table with fields for userId, challengeId, completed, startedAt, and completedAt.

API Endpoints:

GET /api/user/progress

POST /api/user/progress/update

8. Recommendation Engine

Recommend challenges based on:

User performance.

Past challenges completed.

Tags, categories, or programming languages of interest.

API Endpoint:

GET /api/challenges/recommended

9. RAG Integration

Use Retrieval-Augmented Generation (RAG) to:

Provide contextual code snippets and documentation.

Help users resolve dependencies or understand complex challenges.

API Endpoint:

POST /api/challenges/{id}/help:

Accept user queries and return relevant snippets.

Pull code snippets and features from previously added open-source repositories available online.

10. Administration Panel (Future Scope)

Manage challenges and test cases.

Monitor user progress and system performance.

Technical Requirements

Frontend

Framework: React.js (or Next.js for SSR).

Libraries:

React Router for routing.

Material-UI or TailwindCSS for UI components.

Axios for API requests.

Features:

Home page, Login/Signup, Dashboard, Challenge Pages.

Integrated code editor (e.g., Monaco Editor).

Backend

Framework: Spring Boot (Java).

Features:

RESTful APIs for user management, challenges, and progress tracking.

Authentication with JWT.

Test case execution for submissions.

Dependencies:

Spring Security, Spring Data JPA, Hibernate, Lombok.

Database

Primary Database: PostgreSQL (hosted on AWS RDS).

Tables:

Users: Stores user details.

Challenges: Stores challenge metadata (including programming languages).

UserProgress: Tracks user progress.

Submissions: Stores submitted code and results.

Vector Database: Pinecone or Weaviate (for RAG).

Stores embeddings for code snippets and documentation.

Infrastructure

Hosting:

Backend: AWS EC2 or AWS Elastic Beanstalk.

Database: AWS RDS (PostgreSQL).

Tools:

Docker for containerization.

Jenkins for CI/CD pipeline.

System Architecture

Frontend:

React.js communicates with the backend via REST APIs.

Backend:

Spring Boot handles business logic, authentication, and database operations.

Database:

PostgreSQL stores user, challenge, and progress data.

Vector database stores embeddings for RAG queries.

Workflow:

User logs in → Backend validates JWT → Dashboard loads user data and recommended challenges.

User selects a challenge → Backend fetches challenge details and test cases.

User submits code → Backend validates code → Updates user progress.

AI Agent assists users with guidance and contextual help.

Development Workflow

Frontend Development:

Set up React project (npx create-react-app).

Implement pages in order:

Home Page → Login/Signup → Dashboard → Challenge Pages → Code Editor.

Backend Development:

Set up Spring Boot project.

Build APIs in order:

User Authentication → Challenge Listing/Details → Submission Validation → Progress Tracking → AI Assistance.

Database Design:

Create PostgreSQL schema.

Use DBeaver or pgAdmin to visualize the schema.

Testing:

Use Postman to test backend APIs.

Write JUnit tests for backend services.

Test the frontend with tools like Cypress.

Deployment:

Use Docker to containerize the application.

Deploy to AWS (EC2/Elastic Beanstalk).

Timeline (Proposed)

Phase

Tasks

Timeframe

Authentication

Login, Signup, JWT setup

1 Week

Dashboard

User dashboard, API integration

1 Week

Challenge System

Challenge CRUD, filtering by language, filtering by difficulty, details page

2 Weeks

Code Editor Integration

Embed Monaco Editor, connect to backend

1 Week

Submission Validation

Backend validation logic, test cases

2 Weeks

RAG Integration

Embed vector database, implement contextual help

2 Weeks

AI Agent Integration

Implement pair programmer features

2 Weeks

Final Testing & Launch

End-to-end testing, bug fixes, deploy

1 Week

Future Enhancements

Add support for multiple programming languages in the code editor.

Gamification: Add badges, leaderboards, and achievements.

Advanced recommendation engine using machine learning.

Real-time collaboration features for pair programming.

Let me know if this aligns with your vision or if you'd like adjustments!

